#include <GL/glut.h> 
#include<math.h> 
#define sign(x) (x>0)?1:((x<0)?-1:0) 

int ww = 600, wh = 500;   
  
float fillCol[3] = {0.0,0.0,0.0};   
float intCol[3] = {1.0,1.0,1.0}; 
 
void setPixel(float pointx,float pointy, float f[3])   
      {   
             	glBegin(GL_POINTS);   
                glColor3fv(f);   
                glVertex2f(pointx,pointy);   
             	glEnd();   
             	glFlush();   
      }
         
void getPixel(int x, int y, float pixels[3])   
      {   
           glReadPixels(x,y,1.0,1.0,GL_RGB,GL_FLOAT,pixels);   
      }  

void bres(float x1, float Y1, float x2, float y2) 
{ 
	 float dx, dy, x, y, d, s1, s2, swap=0, temp; 
	 float c,d1; 
	 dx = abs(x2 - x1); 
	 dy = abs(y2 - Y1); 
	 s1 = sign(x2-x1); 
	 s2 = sign(y2-Y1); 

	 if(dy > dx) 
	   { 
	    	temp = dx; 
	    	dx = dy; 
	     	dy = temp; 
	     	swap = 1; 
    	} 

  	d = 2 * dy - dx; 
  	x = x1; 
  	y = Y1; 

  	int i; 
  	for(i = 1; i <= dx; i++) 
  		{	 
  
   
 	  		glBegin(GL_POINTS); 
 	  		c=x*cos(45*(3.14/180))+y*sin(45*(3.14/180)); 
  			d1=-x*sin(45*(3.14/180))+y*cos(45*(3.14/180)); 
  	  		glVertex2f(c,d1); 
 	   		while(d >= 0) 
   	 			{ 
     		 		if(swap) x = x + s1; 
      				else 
    		  			{ 
       			 			y = y + s2; 
        					d = d - 2* dx; 
      					} 
   	 			} 
    		if(swap) y = y + s2; 
    		else x = x + s1; 
    		d = d + 2 * dy; 
  		} 
	glEnd(); 
  	glFlush(); 
} 
  
void display()   
       {   
   			glColor3f(0.0, 0.0,0.0);   
    	    bres(50,350,250,350); 
			bres(250,350,250,550); 
			bres(250,550,50,550); 
			bres(50,550,50,350); 
	
	
			bres(50,400,250,400); 
			bres(50,450,250,450); 
			bres(50,500,250,500); 
	 
			bres(100,350,100,550); 
			bres(150,350,150,550); 
			bres(200,350,200,550); 

             glFlush(); 
             
       }
          
void floodfill4(int x,int y,float oldcolor[3],float newcolor[3])   
       {   
            float color[3];   
            getPixel(x,y,color);   
            if(color[0]==oldcolor[0] && (color[1])==oldcolor[1] && (color[2])==oldcolor[2])   
            	{   
                    setPixel(x,y,newcolor);   
                    floodfill4(x+1,y,oldcolor,newcolor);   
                    floodfill4(x-1,y,oldcolor,newcolor);   
                  	floodfill4(x,y+1,oldcolor,newcolor);   
                  	floodfill4(x,y-1,oldcolor,newcolor);   
             	}   
       }   
       
void mouse(int btn, int state, int x, int y)   
       {   
               if(btn==GLUT_LEFT_BUTTON && state == GLUT_DOWN)    
            {   
                     int xi = x;   
                     int yi = (wh-y);   
                    
  		  			floodfill4(xi,yi,intCol,fillCol);   
                     
             }                   
       }   
       
void myinit()   
       {  
                
       		 glClearColor(1.0, 1.0,1.0, 1.0);   
             glClear(GL_COLOR_BUFFER_BIT);       

            gluOrtho2D(0.0,600,0.0,500);   
  
       }   
int main(int argc, char** argv)   
     {   
             glutInit(&argc,argv);   
            // glutInitDisplayMode (GLUT_SINGLE | GLUT_RGB);   
             glutInitWindowSize(ww,wh);   
             glutCreateWindow("SUMEDH");   
             glutDisplayFunc(display);   
             myinit();   
             glutMouseFunc(mouse);   
             glutMainLoop();   
             return 0;   
      }  


